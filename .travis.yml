#####################################################################
# This file is part of libLiFFT.
#
# libLiFFT is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# libLiFFT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with libLiFFT.  If not, see <www.gnu.org/licenses/>.
#####################################################################

dist: trusty

language: cpp

os: linux

sudo: false

compiler:
    - gcc
    - clang
    
branches:
    only:
        - master
        - dev
    
cache:
    directories:
        - ${TRAVIS_BUILD_DIR}/deps/cuda-8.0
        - ${TRAVIS_BUILD_DIR}/deps/clfft-2.12.2
        - ${TRAVIS_BUILD_DIR}/deps/boost-1.60.0
        - ${TRAVIS_BUILD_DIR}/sources/

addons:
    apt:
        sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.8
        packages:
            - g++-4.8
            - clang-3.8
            - cmake
            - libfftw3-dev

env:
    global:
        - BOOST_VERSION=1.60.0
        - LIFFT_OPENCL=OFF
        - CUDA_VER=8.0.61-1
        - CUDA_VER_SHORT=8.0

matrix:
    include:
        # liFFT with gcc # Release
        - os: linux
          compiler: gcc
          env: LIFFT_BUILD_TYPE=Release LIFFT_CUDA=OFF
        # liFFT with clang # Release
        - os: linux
          compiler: clang
          env: LIFFT_BUILD_TYPE=Release LIFFT_CUDA=OFF
        # liFFT with CUDA / cuFFT # Debug
        - os: linux
          compiler: gcc
          env: LIFFT_BUILD_TYPE=Debug LIFFT_CUDA=ON
          sudo: required
        # liFFT with CUDA / cuFFT # Release
        - os: linux
          compiler: gcc
          env: LIFFT_BUILD_TYPE=Release LIFFT_CUDA=ON
          sudo: required
        # liFFT with OpenCL / clFFT # RelWithDebInfo
        - os: linux
          compiler: gcc
          env: LIFFT_BUILD_TYPE=RelWithDebInfo LIFFT_CUDA=OFF LIFFT_OPENCL=ON LIFFT_CLFFT_VER=2.12.2
          sudo: required
  
before_install:
    - |
        if [ "${LIFFT_CUDA}" == "ON" ] || [ "${LIFFT_OPENCL}" == "ON" ]; then
            CUDA_CACHE_PATH=${TRAVIS_BUILD_DIR}/deps/cuda-${CUDA_VER_SHORT}
            if [[ -z "$(ls -A ${CUDA_CACHE_PATH})" ]]; then
              wget https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda-repo-ubuntu1404-8-0-local-ga2_${CUDA_VER}_amd64-deb -q -O "${CUDA_CACHE_PATH}/cuda.deb";
            else
              echo "Using cached cuda.deb in $CUDA_CACHE_PATH"
            fi
            sudo dpkg -i ${CUDA_CACHE_PATH}/cuda.deb
            sudo apt-get update -qq
        fi

install:
    - if [ "${CXX}" == "g++" ]; then export CXX=g++-4.8; export CC=${CXX/g++/gcc}; export GCOV=${CXX/g++/gcov}; fi
    - if [ "${CXX}" == "clang++" ]; then export CXX=clang++-${LIFFT_CLANG_VER}; export CC=clang-${LIFFT_CLANG_VER}; export GCOV="gcov"; fi
    # Boost
    - export BOOST_ROOT="${TRAVIS_BUILD_DIR}/deps/boost-${BOOST_VERSION}"    
    - |
        if [[ -z "$(ls -A ${BOOST_ROOT})" ]]; then
            BOOST_SRC=${TRAVIS_BUILD_DIR}/sources/boost
            mkdir -p ${BOOST_SRC}
            wget http://sourceforge.net/projects/boost/files/boost/${BOOST_VERSION}/boost_${BOOST_VERSION//\./_}.tar.bz2 -nc -O ${BOOST_SRC}/../boost.tar.bz2
            (cd ${BOOST_SRC}/../; tar jxf boost.tar.bz2 --strip-components=1 -C ${BOOST_SRC})
            (cd ${BOOST_SRC}; ./bootstrap.sh --with-libraries=program_options,filesystem,system,test) || exit 1
            (cd ${BOOST_SRC}; ./b2 --prefix=$BOOST_ROOT -d0 install) || exit 1
        else
            echo "Using cached boost version at $BOOST_ROOT"
        fi
    - |
        export LiFFT_COVERAGE=""
        if [ "${LIFFT_CUDA}" == "OFF" ]; then
            pip install --user numpy matplotlib
            # GCov for clang does not work for this folder structure
            if [ "${LIFFT_BUILD_TYPE}" == "Debug" ] && [[ "$CXX" == "g++"* ]]; then
                export LiFFT_COVERAGE="-DLiFFT_ENABLE_COVERAGE=ON"
            fi
        fi
    # CUDA
    - |
        if [ "${LIFFT_CUDA}" == "ON" ] || [ "${LIFFT_OPENCL}" == "ON" ]; then
            CUDA_PACKAGES="cuda"
            echo "Installing ${CUDA_PACKAGES}"
            sudo apt-get install -y ${CUDA_PACKAGES}
            export CUDA_ROOT=/usr/local/cuda-${CUDA_VER_SHORT}
            export LD_LIBRARY_PATH=${CUDA_ROOT}/lib64:${LD_LIBRARY_PATH}
            export PATH=${CUDA_ROOT}/bin:${PATH}
        fi
    # clfft
    - |
        if [ "${LIFFT_OPENCL}" == "ON" ]; then
            export OPENCL_INC=$CUDA_ROOT/include
            export CLFFT_ROOT=${TRAVIS_BUILD_DIR}/deps/clfft-${LIFFT_CLFFT_VER}
            CLFFT_SRC=${TRAVIS_BUILD_DIR}/sources/clfft-${LIFFT_CLFFT_VER}
            if [[ -z "$(ls -A ${CLFFT_ROOT})" ]]; then
                git clone https://github.com/clMathLibraries/clFFT.git ${CLFFT_SRC}
                (cd ${CLFFT_SRC}; git checkout ${LIFFT_CLFFT_VER})
                (cd ${CLFFT_SRC}/src; cmake -DBUILD64=ON -DBUILD_CALLBACK_CLIENT=OFF -DBUILD_CLIENT=OFF -DBUILD_EXAMPLES=OFF -DBUILD_LOADLIBRARIES=ON -DBUILD_RUNTIME=ON -DBUILD_SHARED_LIBS=ON -DBUILD_TEST=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CLFFT_ROOT} -DSUFFIX_LIB=64 -DOPENCL_INCLUDE_DIRS=$OPENCL_INC; make; make install) || exit 1
            else
                echo "Using cached clfft version at $CLFFT_ROOT"
            fi
        fi
    # Versions
    - $CXX --version
    - if [ "${LIFFT_CUDA}" == "ON" ]; then nvcc --version; fi
    - cmake --version
    - $GCOV --version

script:
    - mkdir build && cd build
    - set -e
    - |
        if [ "${LIFFT_OPENCL}" == "ON" ]; then
          cmake ../ -DCMAKE_BUILD_TYPE=${LIFFT_BUILD_TYPE} -DLiFFT_ENABLE_CUDA=OFF -DLiFFT_ENABLE_OPENCL=${LIFFT_OPENCL} -DOpenCL_INCLUDE_DIR=$OPENCL_INC -DCLFFT_ROOT=${CLFFT_ROOT} -DCMAKE_VERBOSE_MAKEFILE=ON ${LiFFT_COVERAGE}
        else
          cmake ../ -DCMAKE_BUILD_TYPE=${LIFFT_BUILD_TYPE} -DLiFFT_ENABLE_CUDA=${LIFFT_CUDA} -DLiFFT_ENABLE_OPENCL=OFF -DCMAKE_VERBOSE_MAKEFILE=ON ${LiFFT_COVERAGE}
        fi
    - make
    - |
        if [ "${LIFFT_CUDA}" == "OFF" ]; then
            export CTEST_OUTPUT_ON_FAILURE=1
            make test
        fi
    - set +e
    
after_success:
  - if [ "${LIFFT_BUILD_TYPE}" == "Debug" ]; then bash <(curl -s https://codecov.io/bash) -x "${GCOV}"; fi

