#####################################################################
# This file is part of liFFT.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#####################################################################

language: cpp

os: linux

dist: xenial

sudo: false

cache:
    directories:
        - ${TRAVIS_BUILD_DIR}/.cache
        - $HOME/virtualenv/python2.7/lib/python2.7/site-packages
        - $HOME/.local/lib/python2.7/site-packages

addons:
    apt:
        sources:
            - ubuntu-toolchain-r-test
        packages:
            - gcc-5
            - clang-4.0
            - cmake
            - libfftw3-dev

env:
    global:
      - LIFFT_BOOST_VER: 1.65.1
      - LIFFT_CLANG_VER: 4.0
      - LIFFT_CUDA_VER: 8.0.61-1
      - LIFFT_CUDA_VER_SHORT: 8.0
      - CUDA_CACHE_DIR: ${TRAVIS_BUILD_DIR}/.cache/cuda
      - BOOST_CACHE_DIR: ${TRAVIS_BUILD_DIR}/.cache/boost

matrix:
    include:
        - name: clang-4.0 FFTW3 Release
          compiler: clang
          env: LIFFT_BUILD_TYPE=Release LIFFT_CUDA=OFF
        - name: gcc-5 FFTW3 Release
          compiler: gcc
          env: LIFFT_BUILD_TYPE=Release LIFFT_CUDA=OFF
        - name: gcc-5 FFTW3 Debug
          compiler: gcc
          env: LIFFT_BUILD_TYPE=Debug LIFFT_CUDA=OFF
        - name: gcc-5 CUDA-8.0.61 Release
          compiler: gcc
          env: LIFFT_BUILD_TYPE=Release LIFFT_CUDA=ON
          sudo: required
        - name: gcc-5 CUDA-8.0.61 Debug
          compiler: gcc
          env: LIFFT_BUILD_TYPE=Debug LIFFT_CUDA=ON
          sudo: required

install:
    - if [ "${CXX}" == "g++" ]; then export CXX="g++-5"; export CC=${CXX/g++/gcc}; export GCOV=${CXX/g++/gcov}; fi
    - if [ "${CXX}" == "clang++" ]; then export CXX=clang++-${LIFFT_CLANG_VER}; export CC=clang-${LIFFT_CLANG_VER}; export GCOV="gcov"; fi
    # CUDA
    - |
      if [[ "${LIFFT_CUDA}" == "ON" ]]; then
        mkdir -p ${CUDA_CACHE_DIR};
        if [[ -z "$(ls -A ${CUDA_CACHE_DIR})" ]]; then
          travis_retry wget https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda-repo-ubuntu1404-8-0-local-ga2_${LIFFT_CUDA_VER}_amd64-deb -q -O "${CUDA_CACHE_DIR}/cuda.deb";
        else
          echo "Using cached cuda.deb in $CUDA_CACHE_DIR";
        fi
        LIFFT_CUDA_VER_APT=${LIFFT_CUDA_VER_SHORT//./-}
        travis_retry sudo dpkg -i ${CUDA_CACHE_DIR}/cuda.deb &&
        travis_retry sudo apt-get update -qq &&
        travis_retry sudo apt-get install -qy cuda-core-${LIFFT_CUDA_VER_APT} cuda-cudart-dev-${LIFFT_CUDA_VER_APT} cuda-cufft-${LIFFT_CUDA_VER_APT} cuda-cufft-dev-${LIFFT_CUDA_VER_APT};
      fi
    # CUDA
    - |
      export CUDA_ROOT=/usr/local/cuda-${LIFFT_CUDA_VER_SHORT}
      export LD_LIBRARY_PATH=${CUDA_ROOT}/lib64:${LD_LIBRARY_PATH}
      export PATH=${CUDA_ROOT}/bin:${PATH}
    # Boost
    - export BOOST_DIR_NAME="boost_${LIFFT_BOOST_VER//./_}"
    - export BOOST_ROOT="$BOOST_CACHE_DIR/installed/$BOOST_DIR_NAME"
    - export CMAKE_PREFIX_PATH=$BOOST_ROOT:$CMAKE_PREFIX_PATH
    - |
      travis_fold start "Boost"
      travis_time_start
      if [[ -z "$(ls -A ${BOOST_CACHE_DIR})" ]]; then
        mkdir -p $BOOST_CACHE_DIR && mkdir -p $BOOST_ROOT &&
        cd $BOOST_CACHE_DIR &&
        travis_retry wget --no-check-certificate -O boost.tar.bz2 http://sourceforge.net/projects/boost/files/boost/${LIFFT_BOOST_VER}/${BOOST_DIR_NAME}.tar.bz2/download &&
        tar -xjf boost.tar.bz2 &&
        cd ${BOOST_DIR_NAME} &&
        ./bootstrap.sh --with-libraries=program_options,filesystem,system,test --prefix=$BOOST_ROOT &&
        ./b2 -j2 &&
        ./b2 install &&
        cd $TRAVIS_BUILD_DIR;
      fi
      travis_time_finish
      travis_fold end "Boost"
    - |
        export LiFFT_COVERAGE=""
        if [ "${LIFFT_CUDA}" == "OFF" ]; then
          pip install --user numpy matplotlib
          # GCov for clang does not work for this folder structure
          if [ "${LIFFT_BUILD_TYPE}" == "Debug" ] && [[ "$CXX" == "g++"* ]]; then
            export LiFFT_COVERAGE="-DLiFFT_ENABLE_COVERAGE=ON";
          fi
        fi
    - echo "$CXX $CC"
    - $CC --version
    - $CXX --version
    - if [ "${LIFFT_CUDA}" == "ON" ]; then nvcc --version; fi
    - $GCOV --version
    - cmake --version

script:
    - mkdir build && cd build
    - set -e
    - cmake ../ -DCMAKE_BUILD_TYPE=${LIFFT_BUILD_TYPE} -DLiFFT_ENABLE_CUDA=${LIFFT_CUDA} -DCMAKE_VERBOSE_MAKEFILE=ON ${LiFFT_COVERAGE}
    - make
    - |
      if [ "${LIFFT_CUDA}" == "OFF" ]; then
          export CTEST_OUTPUT_ON_FAILURE=1
          make test
      fi
    - set +e

after_success:
  - if [ "${LIFFT_BUILD_TYPE}" == "Debug" ]; then bash <(curl -s https://codecov.io/bash) -x "${GCOV}"; fi
